// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// pairwise_product
NumericVector pairwise_product(const NumericVector& x);
RcppExport SEXP _specificity_pairwise_product(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(pairwise_product(x));
    return rcpp_result_gen;
END_RCPP
}
// rao1sp
float rao1sp(const NumericVector& p, const NumericVector& D, bool perm, int seed);
RcppExport SEXP _specificity_rao1sp(SEXP pSEXP, SEXP DSEXP, SEXP permSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type p(pSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type D(DSEXP);
    Rcpp::traits::input_parameter< bool >::type perm(permSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(rao1sp(p, D, perm, seed));
    return rcpp_result_gen;
END_RCPP
}
// raoperms
NumericVector raoperms(const NumericVector& p, const NumericVector& D, const int n_sim, int seed);
RcppExport SEXP _specificity_raoperms(SEXP pSEXP, SEXP DSEXP, SEXP n_simSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type p(pSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type D(DSEXP);
    Rcpp::traits::input_parameter< const int >::type n_sim(n_simSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(raoperms(p, D, n_sim, seed));
    return rcpp_result_gen;
END_RCPP
}
// rao_genetic_max
List rao_genetic_max(const NumericVector& p, const NumericVector& D, const IntegerVector swap_freq, int term_cycles, int maxiters, int popsize_perm, int popsize_swap, int keep, int cross, double prc);
RcppExport SEXP _specificity_rao_genetic_max(SEXP pSEXP, SEXP DSEXP, SEXP swap_freqSEXP, SEXP term_cyclesSEXP, SEXP maxitersSEXP, SEXP popsize_permSEXP, SEXP popsize_swapSEXP, SEXP keepSEXP, SEXP crossSEXP, SEXP prcSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type p(pSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type D(DSEXP);
    Rcpp::traits::input_parameter< const IntegerVector >::type swap_freq(swap_freqSEXP);
    Rcpp::traits::input_parameter< int >::type term_cycles(term_cyclesSEXP);
    Rcpp::traits::input_parameter< int >::type maxiters(maxitersSEXP);
    Rcpp::traits::input_parameter< int >::type popsize_perm(popsize_permSEXP);
    Rcpp::traits::input_parameter< int >::type popsize_swap(popsize_swapSEXP);
    Rcpp::traits::input_parameter< int >::type keep(keepSEXP);
    Rcpp::traits::input_parameter< int >::type cross(crossSEXP);
    Rcpp::traits::input_parameter< double >::type prc(prcSEXP);
    rcpp_result_gen = Rcpp::wrap(rao_genetic_max(p, D, swap_freq, term_cycles, maxiters, popsize_perm, popsize_swap, keep, cross, prc));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_specificity_pairwise_product", (DL_FUNC) &_specificity_pairwise_product, 1},
    {"_specificity_rao1sp", (DL_FUNC) &_specificity_rao1sp, 4},
    {"_specificity_raoperms", (DL_FUNC) &_specificity_raoperms, 4},
    {"_specificity_rao_genetic_max", (DL_FUNC) &_specificity_rao_genetic_max, 10},
    {NULL, NULL, 0}
};

RcppExport void R_init_specificity(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
